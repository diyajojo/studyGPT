{
  "important_topics": {
    "mod1": [
      "SQL DML, SQL  queries on single and multiple tables",
      "Structured, semi-structured and unstructured data",
      "ER diagram – exercises",
      "Introduction to SQL, important data types",
      "Views, assertions",
      "DDL, Table definitions and operations – CREATE, DROP, ALTER, INSERT, DELETE, UPDATE",
      "Characteristics of DB system",
      "ER model: basic concepts, entity set & attributes, notations",
      "Data Models and Schema",
      "Nested queries (correlated and non-correlated)",
      "Structure of Relational Databases, Integrity Constraints",
      "Weak entities, relationships of degree 3",
      "Introduction to Relational Algebra",
      "Database architectures and classification",
      "Triggers, SQL data types",
      "Review of terms: physical and logical records, blocking factor, pinned and unpinned organization.  Heap files, Indexing",
      "Concept & Overview of DBMS",
      "Relationships and constraints – cardinality, participation, notations",
      "Three-Schema-architecture",
      "Aggregation and grouping",
      "Relational Algebra: select, project, Cartesian product operations, join -  Equi-join, Natural join",
      "Database Languages",
      "Synthesizing ER diagram to relational schema",
      "Database Users",
      "Query examples"
    ],
    "mod2": [
      "Structure of Relational Databases",
      "Relational Algebra: Select, Project, Cartesian Product Operations",
      "Important Data Types",
      "Table Definitions and Operations – CREATE, DROP, ALTER, INSERT, DELETE, UPDATE",
      "Synthesizing ER diagram to Relational Schema",
      "Integrity Constraints",
      "Introduction to Relational Algebra",
      "Relational Algebra: Join - Equi-join, Natural Join",
      "Data Definition Language (DDL)",
      "Query Examples",
      "Introduction to SQL"
    ],
    "mod3": [
      "Review of terms: physical and logical records, blocking factor, pinned and unpinned organization",
      "B-Trees and B+Trees",
      "Aggregation and grouping",
      "Heap files, Indexing",
      "Views, assertions",
      "Multi-level-indices",
      "SQL DML",
      "Singe level indices",
      "Indexing on multiple keys – grid files",
      "Triggers, SQL data types",
      "Extendible Hashing",
      "SQL queries on single and multiple tables",
      "Nested queries (correlated and non-correlated)"
    ],
    "mod4": [
      "Armstrong's Axioms",
      "Equivalence of Functional Dependencies",
      "Idea of Normalization",
      "Second Normal Form (2NF)",
      "Different Anomalies in Designing a Database",
      "Boyce Codd Normal Form (BCNF)",
      "Algorithms for Checking Lossless Join Properties",
      "First Normal Form (1NF)",
      "Lossless Join and Dependency Preserving Decomposition",
      "Computations of Closures",
      "Algorithms for Checking Dependency Preserving Properties",
      "Third Normal Form (3NF)",
      "Functional Dependency",
      "Minimal Cover"
    ],
    "mod5": [
      "Concurrent and Serializable Schedules",
      "Locking",
      "Main Characteristics of Graph DB (ArangoDB)",
      "System Log",
      "Main Characteristics of Document DB (MongoDB)",
      "Overview of Concurrency Control",
      "Deferred Database Modification (Concurrent Schedule), Check-pointing",
      "Transaction Processing Concepts: Transaction Model",
      "Conflict Equivalence and Conflict Serializability",
      "Serial Schedules",
      "Significance of Concurrency Control & Recovery",
      "Main Characteristics of Column-Family DB (Cassandra)",
      "Transaction States",
      "Introduction to NoSQL Databases",
      "Main Characteristics of Key-Value DB (Redis)",
      "Recoverable and Cascade-less Schedules",
      "Desirable Properties of Transactions",
      "Two-Phase Locking, Strict 2PL",
      "Log-Based Recovery",
      "Deferred Database Modification (Serial Schedule)"
    ]
  },
  "important_qna": {
    "mod1": [
      {
        "question": "What are the main characteristics of a DB system?",
        "answer": "The main characteristics of a DB system include support for multiple views of data, efficient data management, data integrity and security, data independence and concurrent access."
      },
      {
        "question": "What is the difference between structured, semi-structured and unstructured data?",
        "answer": "Structured data is highly organized and easily searchable in relational databases. Semi-structured data is less organized but still has some structure, often found in XML or JSON formats. Unstructured data is not organized and does not follow a specified format, like emails or social media posts."
      },
      {
        "question": "Can you explain the Three-Schema-Architecture?",
        "answer": "The Three-Schema-Architecture consists of the external schema (user view), conceptual schema (community view) and internal schema (physical storage view). It separates the user applications and the physical database."
      },
      {
        "question": "What are the basic concepts of the ER model?",
        "answer": "The basic concepts of the ER model include entities, attributes, and relationships. Entities represent objects or things, attributes represent properties or characteristics of entities, and relationships represent associations among entities."
      },
      {
        "question": "What is a weak entity in the ER model?",
        "answer": "A weak entity in the ER model is an entity that cannot be uniquely identified by its attributes alone and therefore relies on the relationship with another entity (the owner entity)."
      },
      {
        "question": "What does the relational model in DBMS entail?",
        "answer": "The relational model includes the structure of relational databases, integrity constraints, ER diagrams, relational schemas, and relational algebra. It also introduces SQL and DDL, including table definitions and operations."
      },
      {
        "question": "What are different operations in relational algebra?",
        "answer": "Relational algebra includes operations like select, project, cartesian product, and join (equi-join, natural join)."
      },
      {
        "question": "What does SQL DML encompass?",
        "answer": "SQL DML includes SQL queries on single and multiple tables, nested queries (correlated and non-correlated), aggregation and grouping, views, assertions, triggers, and SQL data types."
      },
      {
        "question": "What is physical data organization in DBMS?",
        "answer": "Physical data organization refers to the physical storage of data in a database. It includes terms like physical and logical records, blocking factor, pinned and unpinned organization, heap files, and indexing."
      },
      {
        "question": "What are the components of a Database Management System (DBMS)?",
        "answer": "The components of a DBMS include the database engine that manages data, database schema that defines the database's logical structure, data dictionary that manages metadata, query language that retrieves data, and database administrator who manages the entire system."
      }
    ],
    "mod2": [
      {
        "question": "What is the structure of relational databases?",
        "answer": "The structure of a relational database is based on the concept of tables where data is stored in rows and columns. Each row represents a unique record, and each column represents a field in the record."
      },
      {
        "question": "What are integrity constraints in relational databases?",
        "answer": "Integrity constraints are rules that help ensure the quality of information stored in a relational database. They enforce the business rules associated with a database and prevent the entry of invalid information into tables."
      },
      {
        "question": "What is the purpose of relational algebra in relational databases?",
        "answer": "Relational algebra provides a set of operations for manipulating relational data. These operations include select, project, cartesian product and join operations."
      },
      {
        "question": "What is the difference between Equi-join and Natural join in relational algebra?",
        "answer": "Equi-join is a join that combines tables based on the equality between values in a column of one table and values in a column of another table. Natural join is a type of equi-join where the join is made on all columns with the same name in both tables."
      },
      {
        "question": "What is SQL and what are its important data types?",
        "answer": "SQL or Structured Query Language is a language used for managing and manipulating relational databases. Its important data types include numeric, string, date/time, and Boolean."
      },
      {
        "question": "What operations can be performed on a table in SQL using DDL?",
        "answer": "With SQL's Data Definition Language (DDL), you can perform operations like CREATE to create a new table, DROP to delete a table, ALTER to modify the structure of a table, and INSERT, DELETE, and UPDATE to modify the data within a table."
      },
      {
        "question": "What is SQL DML?",
        "answer": "SQL DML or Data Manipulation Language includes commands such as SELECT, INSERT, UPDATE, and DELETE. It is used for accessing and manipulating data in a relational database."
      },
      {
        "question": "What is the concept of aggregation and grouping in SQL?",
        "answer": "Aggregation in SQL is a way to perform a calculation on a set of values to return a single scalar value. Grouping is a way to combine rows that have similar values in specified columns into aggregated data."
      },
      {
        "question": "What are triggers in SQL?",
        "answer": "Triggers in SQL are special instructions that are automatically executed or triggered by database events such as INSERT, UPDATE, or DELETE on a particular table."
      },
      {
        "question": "What is the meaning of physical and logical records in the context of physical data organization?",
        "answer": "Physical records are the blocks of data that are stored on the physical storage medium, while logical records represent the data that is stored in the database from a logical point of view, as seen and manipulated by the user."
      }
    ],
    "mod3": [
      {
        "question": "What is SQL DML and what does it entail?",
        "answer": "SQL DML (Data Manipulation Language) is a subset of SQL used for managing data within schema objects. It includes SQL queries on single and multiple tables, nested queries (correlated and non-correlated), aggregation and grouping, views, assertions, triggers, and SQL data types."
      },
      {
        "question": "What are physical and logical records in the context of physical data organization?",
        "answer": "Physical records refer to a group of fields stored on a storage medium, while logical records represent a group of related data fields or a complete set of information."
      },
      {
        "question": "What is the difference between single-level indices and multi-level indices?",
        "answer": "Single-level indices refer to a type of indexing where there is a single layer of indexing, whereas multi-level indices involve multiple layers of indexing, which can improve search performance in large databases."
      },
      {
        "question": "What are B-Trees and B+Trees?",
        "answer": "B-Trees and B+Trees are types of data structures used in databases and file systems to allow for efficient insertion, deletion and searches. The structure of these trees, but not the algorithms for manipulating them, are part of this course."
      },
      {
        "question": "What is extendible hashing?",
        "answer": "Extendible hashing is a type of hash system which treats a hash as a bit string, and uses a trie for bucket lookup. It allows dynamic hashing and grows or shrinks buckets when necessary."
      },
      {
        "question": "What is the idea of normalization in the context of databases?",
        "answer": "Normalization is a database design technique that reduces data redundancy and eliminates undesirable characteristics like insertion, update and deletion anomalies. It involves dividing larger tables into smaller ones and linking them using relationships."
      },
      {
        "question": "What are Armstrong’s Axioms in the context of functional dependency?",
        "answer": "Armstrong’s Axioms are a set of rules that are followed to infer all the functional dependencies on a relational database. They include reflexivity, augmentation, and transitivity."
      },
      {
        "question": "What are the different normal forms in database normalization?",
        "answer": "The different normal forms in database normalization include First Normal Form (1NF), Second Normal Form (2NF), Third Normal Form (3NF), and Boyce Codd Normal Form (BCNF)."
      },
      {
        "question": "What is lossless join and dependency preserving decomposition?",
        "answer": "Lossless join property ensures that the splicing of data does not result in the loss of information. Dependency preserving decomposition means that the functional dependencies are preserved in the decomposed tables, which assists in maintaining the consistency of the database."
      },
      {
        "question": "What are the operations included in the Relational Algebra?",
        "answer": "Relational Algebra includes operations such as select, project, cartesian product operations, join, equi-join, natural join. These operations can be used to manipulate and query data."
      }
    ],
    "mod4": [
      {
        "question": "What are the different anomalies that can occur in designing a database?",
        "answer": "The different anomalies that can occur in designing a database are insertion, update, and deletion anomalies. These anomalies can cause inconsistency and redundancy in the database."
      },
      {
        "question": "What is the concept of normalization in database design?",
        "answer": "Normalization is a process in database design that organizes data to reduce redundancy and improve data integrity. It involves decomposing a table into less redundant tables without losing information."
      },
      {
        "question": "What is a functional dependency in the context of databases?",
        "answer": "Functional dependency is a constraint between two sets of attributes in a database. It occurs when the value of one attribute (or a group of attributes) determines the value of another attribute."
      },
      {
        "question": "What are the Armstrong’s Axioms?",
        "answer": "Armstrong’s Axioms are a set of rules derived from the properties of functional dependencies. They are used to infer all the functional dependencies on a relational database."
      },
      {
        "question": "What are closures and their computation in databases?",
        "answer": "Closures are a set of attributes which can be functionally determined from another set of attributes. The computation of closure involves applying Armstrong's axioms to the set of functional dependencies."
      },
      {
        "question": "What are the 1NF, 2NF, and 3NF in normalization?",
        "answer": "1NF, 2NF, and 3NF are three of the five normal forms in normalization. 1NF (First Normal Form) removes duplicates by ensuring each column is atomic. 2NF (Second Normal Form) ensures no partial dependencies exist. 3NF (Third Normal Form) eliminates transitive dependencies."
      },
      {
        "question": "What is BCNF in normalization?",
        "answer": "BCNF (Boyce-Codd Normal Form) is a higher version of 3NF. It is achieved when every determinant is a candidate key."
      },
      {
        "question": "What is lossless join and dependency preserving decomposition?",
        "answer": "Lossless join ensures that the splicing of table data will not result in spurious tuples. Dependency preserving decomposition ensures that all functional dependencies are preserved, reducing the need for costly join operations."
      },
      {
        "question": "What are the methods for checking Lossless Join and Dependency preserving properties?",
        "answer": "The methods for checking Lossless Join and Dependency preserving properties involve applying algorithms that utilize the functional dependencies and the decomposition of the relation."
      },
      {
        "question": "What are triggers and SQL data types in databases?",
        "answer": "Triggers are special procedures that are automatically executed in response to certain events on a particular table or view. SQL data types define the type of data that can be stored in a database, such as integer, varchar, date, etc."
      }
    ],
    "mod5": [
      {
        "question": "What is the Transaction Model in Transaction Processing Concepts?",
        "answer": "The Transaction Model is a model that represents a unit of work performed against a database. It is the unit of change that is atomic, consistent, isolated, and durable (ACID)."
      },
      {
        "question": "What is the significance of concurrency Control & Recovery in Database Systems?",
        "answer": "Concurrency Control ensures that correct results for concurrent operations are generated, while preserving data integrity. Recovery, on the other hand, is responsible for ensuring data integrity in the face of failures such as power loss or software errors."
      },
      {
        "question": "What are some Desirable Properties of transactions?",
        "answer": "Desirable properties of transactions include Atomicity, Consistency, Isolation, and Durability (ACID properties)."
      },
      {
        "question": "What is the difference between Concurrent and Serializable Schedules?",
        "answer": "Concurrent schedules involve the overlapping of transactions, while serializable schedules ensure that the concurrent execution of a set of transactions yields a result equivalent to some serial execution."
      },
      {
        "question": "What is meant by Conflict equivalence and conflict serializability?",
        "answer": "Conflict equivalence refers to when two schedules involve the same set of transactions and the order of any two conflicting operations is the same in both schedules. Conflict serializability is a way to check if a schedule is serializable by checking its conflict equivalence with a serial schedule."
      },
      {
        "question": "What is the concept of Recoverable and cascade-less schedules?",
        "answer": "Recoverable schedules are those where for each pair of transactions, the commit operation of an older transaction precedes the commit operation of a younger transaction. Cascade-less schedules restrict the cascading rollback by ensuring that a transaction can only commit when all other transactions from which it has read have committed."
      },
      {
        "question": "What is Two-phase locking and why is it important?",
        "answer": "Two-phase locking is a protocol that ensures serializability. It has two phases, an expanding phase where locks are acquired and no locks are released, followed by a shrinking phase where locks are released and no locks are acquired. This protocol ensures serializability and prevents conflicts."
      },
      {
        "question": "What is Log-based recovery?",
        "answer": "Log-based recovery is a technique that records each database operation in a log before it's performed to facilitate recovery in the event of a failure. The log is kept on a stable storage system."
      },
      {
        "question": "What is Deferred database modification and check-pointing?",
        "answer": "Deferred database modification is a strategy where changes resulting from a transaction are not immediately updated in the database. Instead, they are recorded in the system log. Check-pointing is a technique used in DBMS to minimize the time spent during recovery in case of system failure."
      },
      {
        "question": "What are the main characteristics of NoSQL Databases?",
        "answer": "NoSQL databases are non-relational databases designed to handle large amounts of data, provide high scalability, and a flexible schema. They include Key-Value stores, Document databases, Column-Family databases, and Graph databases."
      }
    ]
  },
  "flashcards": [
    {
      "question": "What is a database?",
      "answer": "A database is a collection of related data."
    },
    {
      "question": "What does data mean?",
      "answer": "Data refers to known facts that can be recorded and that have implicit meaning."
    },
    {
      "question": "What are some implicit properties of a database?",
      "answer": "A database represents some aspect of the real world, is a logically coherent collection of data with some inherent meaning, is not a random assortment of data, and is designed, built, and populated with data for a specific purpose."
    },
    {
      "question": "What are the essential elements of a database?",
      "answer": "A database has a source of data, interaction with the real world, and an audience interested in that data."
    },
    {
      "question": "What is a Database Management System (DBMS)?",
      "answer": "A DBMS is a collection of programs that enables users to create and maintain a database."
    },
    {
      "question": "What happens in the process of defining a database?",
      "answer": "Defining a database involves specifying the data types, structures, and constraints of the data to be stored in the database."
    },
    {
      "question": "What is meta-data in the context of a DBMS?",
      "answer": "Meta-data is the database definition or descriptive information that is also stored by the DBMS in the form of a database catalog or dictionary."
    },
    {
      "question": "Where is data in a database ultimately stored?",
      "answer": "All data in a database is ultimately stored physically on a secondary storage device such as discs and tapes."
    },
    {
      "question": "What do data models describe in a Database Management System?",
      "answer": "In a database management system, data models describe how a database’s logical structure is represented."
    },
    {
      "question": "What do data models specify?",
      "answer": "Data models specify how data is linked to one another, as well as how it is handled and stored within the system."
    }
  ]
}