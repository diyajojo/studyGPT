{
  "important_topics": {
    "mod3": [
      "SQL DML",
      "Views, assertions",
      "SQL queries on single and multiple tables",
      "Multi-level-indices",
      "Spanned and Unspanned Organization"
    ],
    "mod2": [
      "Synthesizing ER Diagram to Relational Schema",
      "Query Examples",
      "Table Definitions and Operations: CREATE, DROP, ALTER, INSERT, DELETE, UPDATE",
      "Important SQL Data Types",
      "Data Definition Language (DDL)"
    ],
    "mod4": [
      "The Idea of Normalization",
      "Armstrongâ€™s Axioms",
      "Lossless Join and Dependency Preserving Decomposition",
      "Minimal Cover",
      "First Normal Form (1NF)"
    ],
    "mod5": [
      "Graph DB (ArangoDB)",
      "Check-pointing",
      "Strict 2PL",
      "Concurrent and Serializable Schedules",
      "Desirable Properties of Transactions"
    ],
    "mod1": [
      "Characteristics of DB System",
      "Notations",
      "Entity Set & Attributes",
      "ER Diagram Exercises",
      "Relationships of Degree 3"
    ]
  },
  "important_qna": {
    "mod3": [
      {
        "question": "What is SQL DML?",
        "answer": "SQL DML (Data Manipulation Language) provides the ability to query information from the database and to insert tuples into, delete tuples from, and modify tuples in the database."
      },
      {
        "question": "What are the types of SQL queries that can be performed on single and multiple tables?",
        "answer": "SQL queries on single and multiple tables can involve nested queries (both correlated and non-correlated), aggregation and grouping, views, assertions, and triggers."
      },
      {
        "question": "What is the difference between physical and logical records in the context of Physical Data Organization?",
        "answer": "Physical records refer to the actual data stored on the storage medium, while logical records refer to the data as seen by a user or application, which may be different from how the data is physically stored."
      },
      {
        "question": "What is a B-Tree and B+Tree in the context of Physical Data Organization?",
        "answer": "In the context of physical data organization, B-Trees and B+Trees are types of data structures used in databases for efficient data retrieval. They allow for quick lookups and insertions of data."
      },
      {
        "question": "What is the difference between fixed-length and variable-length records?",
        "answer": "If every record in the file has exactly the same size (in bytes), the file is said to be made up of fixed-length records. If different records in the file have different sizes, the file is said to be made up of variable-length records."
      }
    ],
    "mod2": [
      {
        "question": "What is the relational model in databases?",
        "answer": "The relational model was first introduced by Ted Codd in 1970. It represents a database as a collection of relations. A relation is a table with values, and each row in the table is a collection of related data values representing a real-world entity. A row in a relational table is called a tuple, a column header is an attribute, and the table itself is a relation."
      },
      {
        "question": "What is relational algebra in the context of databases?",
        "answer": "Relational algebra is a set of operations used to manipulate or query data within a relational database. It includes operations like select, project, Cartesian product, and join, including equi-join and natural join."
      },
      {
        "question": "What does the ER diagram represent in the context of databases?",
        "answer": "An ER (Entity-Relationship) diagram represents the structure of a database. It includes entity sets, attributes, relationships, constraints, cardinality, participation, weak entities, and relationships of degree 3. The ER diagram is then synthesized into a relational schema."
      },
      {
        "question": "What is the Structured Query Language (SQL) and what are some of its operations?",
        "answer": "SQL is a programming language used to manage and manipulate relational databases. It includes operations defined by Data Definition Language (DDL) such as CREATE, DROP, ALTER, INSERT, DELETE, and UPDATE, which respectively create, delete, modify, insert data into, delete data from, and update data in a database."
      },
      {
        "question": "What is the role of integrity constraints in relational databases?",
        "answer": "Integrity constraints in relational databases ensure the accuracy and consistency of the data. They enforce certain conditions that data in the database must comply with. For example, they can prevent duplicate data, manage null values, and uphold the relationship between tables."
      }
    ],
    "mod4": [
      {
        "question": "What are the different anomalies in designing a database?",
        "answer": "Anomalies in database design are issues that arise when a database is not properly normalized. These include update anomalies, where changes in data can lead to inconsistencies; insertion anomalies, where certain data cannot be inserted without the presence of other data; and deletion anomalies, where the deletion of certain data can result in unintended loss of other data."
      },
      {
        "question": "What is the concept of normalization in database design?",
        "answer": "Normalization is a systematic approach of decomposing tables to eliminate data redundancy and undesirable characteristics like insertion, update and deletion anomalies. It is a multi-step process that puts data into tabular form by removing duplicated data from the relation tables."
      },
      {
        "question": "What are the four normal forms in database design?",
        "answer": "The four normal forms in database design are First Normal Form (1NF), Second Normal Form (2NF), Third Normal Form (3NF), and Boyce Codd Normal Form (BCNF). Each form has a specific set of rules and requirements that must be met for a database to be considered in that form."
      },
      {
        "question": "What is lossless join and dependency preserving decomposition?",
        "answer": "Lossless join property ensures that the spurious tuples are not generated when relations are joined back. Dependency preserving property ensures that all functional dependencies are preserved while decomposing. These properties are crucial to maintain data integrity."
      },
      {
        "question": "What is the purpose of algorithms for checking Lossless Join and Dependency preserving properties?",
        "answer": "The algorithms for checking Lossless Join and Dependency Preserving properties are used to verify the correctness of the decomposition. They are used to ensure that the decomposition of a database schema, into multiple schemas, does not result in the loss of information, and that it preserves all functional dependencies of the original schema."
      }
    ],
    "mod5": [
      {
        "question": "What is the significance of concurrency control in transaction processing?",
        "answer": "Concurrency control in transaction processing is significant as it ensures that database transactions are performed concurrently without violating the data integrity. It prevents conflicts which could arise when multiple transactions are executed simultaneously, and ensures the consistency and isolation of each transaction."
      },
      {
        "question": "What are the desirable properties of transactions?",
        "answer": "The desirable properties of transactions, often referred to as ACID properties, include Atomicity (the whole transaction is processed or none of it is), Consistency (ensuring data remains consistent before and after the transaction), Isolation (each transaction is executed in isolation from other transactions), and Durability (the results of a transaction are permanent, even in cases of system failure)."
      },
      {
        "question": "How does two-phase locking contribute to transaction processing?",
        "answer": "Two-phase locking (2PL) is a concurrency control method that ensures serializability in transaction processing. It has two phases, the expanding phase where locks are acquired and no locks are released, and the shrinking phase where locks are released and no new locks are acquired. This protocol prevents conflicts and ensures that transactions do not overlap, maintaining data integrity."
      },
      {
        "question": "What is the purpose of log-based recovery in transaction processing?",
        "answer": "Log-based recovery in transaction processing is a technique to bring the database back to a consistent state after a failure or system crash. It involves keeping a log of all changes made to the database during the transaction execution. If a failure occurs, the system can use the log to undo the changes from incomplete transactions and restore the database to its previous consistent state."
      },
      {
        "question": "What are the main characteristics of NoSQL databases such as Key-value DB and Document DB?",
        "answer": "NoSQL databases such as Key-value DB and Document DB are designed to handle large data sets efficiently. Key-value DB, like Redis, stores data as a collection of key-value pairs, making it highly efficient for lookup operations. Document DB, like MongoDB, stores data in a semi-structured document format, usually JSON, which allows for greater flexibility in data modeling and handling complex hierarchical data structures."
      }
    ],
    "mod1": [
      {
        "question": "What is the ER model in DBMS?",
        "answer": "The ER (Entity-Relationship) model in DBMS is a conceptual data model that views the real world as entities and relationships. It includes basic concepts such as entities, attributes, and relationships and uses specific notations to represent these components."
      },
      {
        "question": "What is the difference between structured, semi-structured, and unstructured data?",
        "answer": "Structured data is highly organized and easily searchable in relational databases. Semi-structured data, while not as organized as structured data, contains tags or other markers to enforce hierarchy and order. Unstructured data lacks a predefined model or organization, making it more complex to analyze and process."
      },
      {
        "question": "What is the three-schema-architecture in DBMS?",
        "answer": "The three-schema-architecture in DBMS is a database architecture that separates the conceptual, external, and internal schemas. The conceptual schema defines all database entities, relationships, and constraints. The external schema defines how users view the data. The internal schema defines physical storage methods and structures."
      },
      {
        "question": "What are weak entities in the context of an ER model?",
        "answer": "Weak entities in the ER model are entities that cannot be uniquely identified by their attributes alone. They depend on some other entity, known as the owner or parent entity. The relationship between a weak entity and its owner entity is called an identifying relationship."
      },
      {
        "question": "What is the role of cardinality and participation in the context of an ER model?",
        "answer": "In the context of an ER model, cardinality defines the numerical attributes of the relationship between two entities, while participation determines if all or only some instances of an entity are involved in the relationship. Both concepts help to more accurately model real-world relationships in the database."
      }
    ]
  },
  "flashcards": {
    "mod4": [
      {
        "question": "What are the different anomalies in designing a database?",
        "answer": "The different anomalies in designing a database are insertion anomalies, deletion anomalies, and modification anomalies."
      },
      {
        "question": "What is functional dependency in the context of databases?",
        "answer": "Functional dependency is a constraint between two sets of attributes in a database. It exists when a relation between two attributes allows you to uniquely determine the corresponding attribute's value, given the value of the other attribute."
      },
      {
        "question": "What is Armstrongâ€™s Axioms in the context of databases?",
        "answer": "Armstrong's Axioms are a set of rules that are used to infer all the functional dependencies on a relational database. They are used to define the properties of functional dependencies which are used in normalization of relational schema."
      },
      {
        "question": "What is meant by the term 'normalization' in databases?",
        "answer": "Normalization is the process of organizing data in a database. This includes creating tables and establishing relationships between those tables according to rules designed to protect data integrity, and to make the database more flexible by eliminating redundancy and inconsistent dependency."
      },
      {
        "question": "What are the algorithms for checking Lossless Join and Dependency preserving properties?",
        "answer": "Lossless Join and Dependency preserving properties are checked using decomposition algorithms. These algorithms ensure that no information is lost during the decomposition process and all functional dependencies are preserved."
      }
    ],
    "mod3": [
      {
        "question": "What does SQL DML provide?",
        "answer": "The SQL DML provides the ability to query information from the database and to insert tuples into, delete tuples from, and modify tuples in the database."
      },
      {
        "question": "What is the SELECT statement in SQL?",
        "answer": "SQL has one basic statement for retrieving information from a database; the SELECT statement."
      },
      {
        "question": "What is the role of the WHERE clause in SQL?",
        "answer": "The WHERE clause in SQL is a conditional (Boolean) expression that identifies the tuples to be retrieved by the query."
      },
      {
        "question": "What is the concept of Physical Data Organization in SQL?",
        "answer": "Physical Data Organization involves the review of terms: physical and logical records, blocking factor, pinned and unpinned organization. Heap files, Indexing, Single level indices, numerical examples, Multi-level-indices, numerical examples, B-Trees & B+-Trees, Extendible Hashing, Indexing on multiple keys â€“ grid files."
      },
      {
        "question": "What does the INTERSECT operator do in SQL?",
        "answer": "The INTERSECT operator in SQL is used to return the records that are in common between two SELECT statements or data sets."
      }
    ],
    "mod2": [
      {
        "question": "What is the structure of relational databases?",
        "answer": "The structure of relational databases is based on the relational model, where data is organized into one or more tables (or 'relations') of columns and rows, with a unique key identifying each row. Each table/relation represents an entity set."
      },
      {
        "question": "What is relational algebra?",
        "answer": "Relational algebra is a set of operations on relations (databases). These operations (select, project, Cartesian product, join operations - Equi-join, natural join) help manipulate the data to give meaningful results."
      },
      {
        "question": "What is an ER diagram and how is it synthesized to a relational schema?",
        "answer": "An Entity-Relationship (ER) diagram represents the structure of a database with entities, attributes, and relationships. It is synthesized to a relational schema by creating a table for each entity and relationship, and mapping attributes to the fields of these tables."
      },
      {
        "question": "What are the key operations in SQL and their functions?",
        "answer": "Key operations in SQL include CREATE (to create a new table), DROP (to delete a table), ALTER (to modify existing table), INSERT (to insert new data), DELETE (to remove data), and UPDATE (to modify existing data). These operations help in managing the database effectively."
      },
      {
        "question": "What are integrity constraints in the context of a relational database?",
        "answer": "Integrity constraints are rules that help ensure the quality of the information in a relational database. They enforce the correctness of a data and prevent the entry of incorrect information into tables. Examples include domain constraints, primary key constraints, and referential integrity constraints."
      }
    ],
    "mod5": [
      {
        "question": "What is the Transaction Model in Transaction Processing Concepts?",
        "answer": "A transaction model is a unit of work that is performed against a database. It is the propagation of one or more changes to the database. Transactions are units of work that can be committed or rolled back. If a failure occurs during the processing of a transaction, all changes can be rolled back."
      },
      {
        "question": "What is the significance of concurrency control and recovery in a transaction processing system?",
        "answer": "Concurrency control ensures that correct results for concurrent operations are generated, while preserving data integrity. Recovery ensures that the database is restored to a consistent state after a failure."
      },
      {
        "question": "What are Transaction States in a transaction processing system?",
        "answer": "Transaction States are the stages of a transaction's life cycle. They include the Active State (transaction is executing), Partially Committed (transaction has executed its final operation), Committed (after successful completion), Failed (when normal execution can no longer proceed), and Aborted (after transaction has been rolled back)."
      },
      {
        "question": "What are desirable properties of transactions?",
        "answer": "Desirable properties of transactions include Atomicity (all-or-nothing execution), Consistency (ensuring system moves from one consistent state to another), Isolation (ensuring each transaction is executed independently), and Durability (ensuring effect of committed transaction persists in case of a system failure)."
      },
      {
        "question": "What are the main characteristics of NoSQL databases?",
        "answer": "NoSQL databases are schema-less, allowing for more flexible data models. They are designed for scalability, with two types: vertical scaling (adding more resources to a single server) and horizontal scaling (adding more servers to a system). NoSQL databases support a wide range of data models, including key-value, document, wide-column, and graph formats."
      }
    ],
    "mod1": [
      {
        "question": "What is a Database Management System (DBMS)?",
        "answer": "A DBMS is a collection of programs that enables users to create and maintain a database. It facilitates the processes of defining, constructing, manipulating, and sharing databases among various users and applications."
      },
      {
        "question": "What are the characteristics of a DBMS?",
        "answer": "Characteristics of a DBMS include system protection against hardware or software malfunctions, security protection against unauthorized or malicious access, and the ability to evolve and maintain the database system over time."
      },
      {
        "question": "What is the difference between structured, semi-structured, and unstructured data?",
        "answer": "Structured data is highly organized and resides in a fixed format like tables with rows and columns. Unstructured data has no predefined format or organization, often including text, images, audio, and video. Semi-structured data does not fit into a strict relational structure but has some organizational properties, such as tags or markers."
      },
      {
        "question": "What is the Entity-Relationship (ER) model in the context of databases?",
        "answer": "The ER model is a conceptual tool used in illustrating the logical structure of databases. It includes the basic concepts of entities, attributes, and relationships. In addition, it also involves constraints such as cardinality and participation, and notations for weak entities and relationships of degree 3."
      },
      {
        "question": "Who are the database users and what are their roles?",
        "answer": "Database users include database administrators, responsible for authorizing access and maintaining resources; database designers, who identify and structure the data to be stored; end users, who access the database for querying, updating, and generating reports; system analysts and application programmers, who develop specifications for transactions and implement them as programs."
      }
    ]
  }
}