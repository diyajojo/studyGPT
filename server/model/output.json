{
  "important_topics": {
    "mod1": [
      "Aggregation and Grouping",
      "Structured, Semi-Structured and Unstructured Data",
      "Structure of Relational Databases",
      "SQL Queries on Single and Multiple Tables",
      "Views, Assertions"
    ],
    "mod2": [
      "Structure of Relational Databases",
      "Integrity Constraints",
      "Table Definitions and Operations: CREATE, DROP, ALTER, INSERT, DELETE, UPDATE",
      "Query Examples",
      "Introduction to Relational Algebra"
    ],
    "mod3": [
      "SQL queries on single and multiple tables",
      "Nested queries (correlated and non-correlated)",
      "Indexing on multiple keys â€“ grid files",
      "Multi-level-indices, numerical examples",
      "Views, assertions"
    ],
    "mod4": [
      "Minimal Cover",
      "Second Normal Form (2NF)",
      "Boyce Codd Normal Form (BCNF)",
      "Equivalence of Functional Dependencies",
      "Closures and their Computation"
    ],
    "mod5": [
      "Deferred Database Modification (Serial Schedule)",
      "Transaction States",
      "Desirable Properties of Transactions",
      "Main Characteristics of Document DB",
      "Main Characteristics of Column-Family DB"
    ]
  },
  "important_qna": {
    "mod1": [
      {
        "question": "What are the three types of data in DBMS?",
        "answer": "The three types of data in DBMS are structured, semi-structured, and unstructured data."
      },
      {
        "question": "What is a three-schema-architecture in DBMS?",
        "answer": "A three-schema-architecture in DBMS is a framework for defining how data is structured and accessed. It includes the physical schema (how data is stored), logical schema (how data is logically organized), and external schema (how data is viewed by end users)."
      },
      {
        "question": "What are the basic concepts of the ER model?",
        "answer": "The basic concepts of the ER model include entity set, attributes, relationships, and constraints such as cardinality and participation."
      },
      {
        "question": "What is meant by weak entities in the ER model?",
        "answer": "Weak entities in the ER model are entities that cannot be uniquely identified by their attributes alone. They rely on a foreign key to provide part of their identity."
      },
      {
        "question": "How is the structure of relational databases defined in the Relational Model?",
        "answer": "The structure of relational databases in the Relational Model is defined by tables (relations), attributes, and tuples. It also includes integrity constraints to maintain the accuracy and consistency of the data."
      }
    ],
    "mod2": [
      {
        "question": "What is the structure of relational databases?",
        "answer": "The structure of relational databases is based on the concept of tables or relations where data is organized in rows and columns. Each row represents a record or tuple, and each column represents an attribute or field."
      },
      {
        "question": "What are integrity constraints in the context of relational databases?",
        "answer": "Integrity constraints in relational databases are rules that are used to maintain the quality and accuracy of the data in the database. They ensure that the changes made to the database by authorized users do not result in a loss of data consistency."
      },
      {
        "question": "What is the purpose of synthesizing an ER diagram to a relational schema?",
        "answer": "Synthesizing an ER diagram to a relational schema helps in the conversion of a conceptual data model into a logical data model. This process involves mapping entities to tables, relationships to foreign keys, and attributes to columns."
      },
      {
        "question": "What are the basic operations of relational algebra?",
        "answer": "The basic operations of relational algebra are Select, Project, Union, Set difference, Cartesian product, and Rename. They are used to manipulate or retrieve data from relational databases."
      },
      {
        "question": "What are Equi-join and Natural join in the context of relational algebra?",
        "answer": "Equi-join is a type of join that combines tuples from different relations based on the equality between values in their common attributes. Natural join is a special type of equi-join where the join is made on all the common attributes of the relations."
      }
    ],
    "mod3": [
      {
        "question": "What does SQL DML refer to in the context of Computer Science and Engineering?",
        "answer": "SQL DML (Data Manipulation Language) refers to the subset of SQL used to add, update, and delete data within tables, including SQL queries on single and multiple tables, nested queries, aggregation and grouping, views, assertions, triggers, and SQL data types."
      },
      {
        "question": "What is the significance of physical and logical records in physical data organization?",
        "answer": "Physical and logical records are integral to the organization and storage of data in databases. A physical record refers to a contiguous block of data stored on a storage device, while a logical record represents a group of data fields, such as a row in a table."
      },
      {
        "question": "What are single level indices and multi-level indices?",
        "answer": "In database systems, single level indices and multi-level indices refer to methods of indexing used to expedite data retrieval. Single level indices involve one level of indexing while multi-level indices employ a hierarchical structure with multiple levels of indices."
      },
      {
        "question": "What are B-Trees and B+Trees in the context of physical data organization?",
        "answer": "B-Trees and B+Trees are data structures used in databases for organizing data. They allow for efficient insertion, deletion, and search operations. The structures of these trees are covered in the course, but the algorithms for their operation are not required."
      },
      {
        "question": "What does the term 'normalization' refer to in the context of database design?",
        "answer": "Normalization in database design is a process that organizes the columns and tables in a relational database to minimize data redundancy and improve data integrity. It involves the application of rules to achieve different normal forms such as 1NF, 2NF, 3NF, and BCNF."
      }
    ],
    "mod4": [
      {
        "question": "What are the different anomalies in designing a database?",
        "answer": "The common anomalies in designing a database include insertion anomaly (difficulty in inserting data), deletion anomaly (unintended loss of data), and update anomaly (data inconsistency resulting from data redundancy)."
      },
      {
        "question": "What is the idea of normalization in databases?",
        "answer": "Normalization is a systematic approach to decompose tables to eliminate data redundancy and undesirable characteristics like Insertion, Update and Deletion Anomalies. It helps to reduce data redundancy and improve data integrity."
      },
      {
        "question": "What is functional dependency in the context of databases?",
        "answer": "Functional dependency is a constraint between two sets of attributes in a database from a relation. If 'A' and 'B' are sets of attributes, 'B' is functionally dependent on 'A' if each value of 'A' is associated with exactly one value of 'B'."
      },
      {
        "question": "What are Armstrong's Axioms in the context of database normalization?",
        "answer": "Armstrong's Axioms are a set of rules used to infer all the functional dependencies on a relational database. They include reflexivity, augmentation, and transitivity rules."
      },
      {
        "question": "What are closures and their computation in database normalization?",
        "answer": "Closures are a set of attributes functionally determined by a given set of attributes. The computation of closure helps to identify the dependencies in a relation and is a key tool for normalization."
      }
    ],
    "mod5": [
      {
        "question": "What is the significance of concurrency control and recovery in transaction processing?",
        "answer": "Concurrency control and recovery are critical in transaction processing as they ensure the accuracy and reliability of data. Concurrency control prevents conflicts when multiple transactions are executed simultaneously by ensuring data consistency. Recovery, on the other hand, ensures that the database can return to a consistent state after any failure."
      },
      {
        "question": "What are transaction states and system logs?",
        "answer": "Transaction states are the various stages a transaction goes through from initiation to completion or termination. They include active, partially committed, committed, failed, and aborted. System logs are files that record all actions in a database that alter data, aiding in recovery when a failure occurs."
      },
      {
        "question": "What are desirable properties of transactions?",
        "answer": "Desirable properties of transactions include Atomicity (all or nothing), Consistency (ensures system moves from one consistent state to another), Isolation (each transaction should execute independently), and Durability (once committed, changes are permanent)."
      },
      {
        "question": "What is the difference between serial schedules and concurrent schedules?",
        "answer": "Serial schedules involve executing one transaction after another, ensuring data consistency but often leading to underutilization of system resources. Concurrent schedules allow multiple transactions to be executed simultaneously, improving system utilization but requiring careful management to avoid data inconsistency."
      },
      {
        "question": "What is conflict equivalence and conflict serializability?",
        "answer": "Conflict equivalence refers to two schedules being conflict equivalent if they have the same set of transactions and the order of conflicting operations is the same. Conflict serializability is a method to check if a concurrent schedule is equivalent to a serial one, ensuring that concurrent execution of transactions does not lead to inconsistency."
      }
    ]
  },
  "flashcards": {
    "mod1": [
      {
        "question": "What is a database?",
        "answer": "A database is a collection of related data."
      },
      {
        "question": "What does data mean?",
        "answer": "Data refers to known facts that can be recorded and that have implicit meaning."
      }
    ],
    "mod2": [
      {
        "question": "What are the implicit properties of a database?",
        "answer": "A database represents some aspect of the real world, is logically coherent with some inherent meaning, and is designed, built, and populated with data for a specific purpose."
      },
      {
        "question": "What is a Database Management System (DBMS)?",
        "answer": "A DBMS is a collection of programs that enables users to create and maintain a database."
      }
    ],
    "mod3": [
      {
        "question": "What does defining a database involve?",
        "answer": "Defining a database involves specifying the data types, structures, and constraints of the data to be stored in the database."
      },
      {
        "question": "What is metadata in the context of DBMS?",
        "answer": "Metadata is the database definition or descriptive information stored by the DBMS in the form of a database catalog or dictionary."
      }
    ],
    "mod4": [
      {
        "question": "What is a data model?",
        "answer": "Data models describe how a databaseâ€™s logical structure is represented. They are essential for introducing abstraction and specify how data is linked to one another, as well as how it is handled and stored within the system."
      },
      {
        "question": "What is the purpose of a Conceptual Data Model?",
        "answer": "A Conceptual Data Model is used to represent data in a way that is close to the way users perceive data."
      }
    ],
    "mod5": [
      {
        "question": "What is the purpose of Representational Data Models?",
        "answer": "Representational Data Models are used to represent only the logical part of the database and do not represent the physical structure."
      },
      {
        "question": "Where is all data in a database ultimately stored?",
        "answer": "All data in a database is ultimately stored physically on a secondary storage device such as discs and tapes."
      }
    ]
  }
}